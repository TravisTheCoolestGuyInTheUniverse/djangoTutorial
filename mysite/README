Remaking my notes since i didn't push my code to github like a doofus:

Django is powerful because it forces its users to develop websites in an optimal way:
it forces the website to be scaleable and efficient. Other web frameworks give you more 
flexability and an ability to see what's happening under the hood however they also allow 
their users to do things however they want even if it is sub-optimal. 

A project in Django is composed of one or more web-applications. For example, there could be an 
application for a home page, another for a store page, ect. This makes the projects more scalable.

****    URLS    ****
urls are "universal resource locators". In this case, they are used to identify each web page.
the urls.py file for each web application is used to decide what is displayed at each 
url.

****    MODELS    ****
models in a django project are useful because they act as "models" for how the database for the website
will generated. Models can be used to create no-sql databases or sql databases.



****    ADMIN AND APPS    **** 
when you create an adminstrator/superuser you can associate an email with it.
when the website is sent to production, error messages can be emailed to the super user which is
pretty handy. 

as a super user, you can login using the /admin uri and have a lot of handy tools
available to you via a clean and convenient gui. 

you can see and manipulate your models, but you have to register your models
in admin.py first.

you can have hundreds of attributes (columns) for a model (table),
but you may only care about seeing a few on the admin page. this is done
in the admin.py file.

****    VIEWS AND TEMPLATES     ****
most pages are served via the MVC (model view controller) framework.
views are interacting with models, and controllers work with the urls.

takes place in views.py. return render for a view function so the website knows what to render
for a particular view.

in templates:
<!--similar to jinja2 temapalting.-->
<!--if you wanna do some logic: {%%} -->
<!--if you wanna do a variable: {{ variable }}-->
<!--if you wanna do for loop: {%for%} {%endfor%}-->




lets review some terms: 

view: 
user interface, what a user sees in the browser when the website is rendered. 
HTML/Javascript/CSS/Jinja
model:
A model in Django lays out the structure of a table in a database. defines its rows/colums
and what is contained in each row and column.
template:
url:


****    CSS FRAMEWORK    ****
framework we're gonna use is "materialize css".
uses "material design". Things are lifted above other things like pieces of paper.

to start, go to the website and put the links in the header file of the template
so that it's loaded before the page is rendered.

also makes the website responsive: looks good on all devices.

if you want to download and compile your own version of the framework css you can downoad the source from the website 
and use something like Koala to compile it. That's what i did and it is located in
main/static/main/css folder and referred to in templates.html.

****   HANDLING USER REGISTRATION    ****
start by creating a view in main.views.py for the /register url. 
this view creates a user registration form using the default django class.
this form is then passed into the render function as context along with the
register.html template. Then if the user presses the register button the contents
of the form are saved to the database (using the default User model) and then
then the user is logged in using default django methods.
lastly the website needs to know to show the register view at /register
so create a path in urls.py. 

****    MESSAGES AND INCLUDES    ****
Basically this communicates to the user that they have been logged in, there's an error, ect.
This is done in the views.py file. 

****    LOGIN AND LOGOUT    ****
in urls.py, create path for logout/ so the website knows what to do at that uri.
make a view that isn't called logout that calls the built in django function logout. 

in urls.py create path for login/. make a similar view that also isn't called login because we 
will use djangos login function. if the method is GET, then render an AuthenticationForm in the template login.html. 
if the method is POST, then take the data that the user put into the form and authenticate it using the
django authenticate() function. Then if the user exists, log them in using the login() function.

You can also create your own forms and extend django forms. Look in forms.py.

****    LINKING MODELS WITH FOREIGN KEYS    ****
Recall your databases course: many to many relationships between tables are bad. Should only be 
one to one or one to many relationships. Also remember first second and third normal forms:

first normal form: basically every entry in a table has a primary key. 
second normal form: no functional dependencies. All non-key attributes depend on the entire primary key and not just part of it. (only relevant for composite keys)
third normal form: no transitive dependencies. all non-key attributes depend on the primary key only and not other attributes.

we might want tables in our database that are related to one another. Why? in the case of the tutorial website,
we don't want all the tutorials to just sit on the main page, we want them to to be organized.

See in models how each table is connected to one another. Important method is models.ForeignKey

So now each tutorial will have a related series and each series will have a related category.

business rules for the database:
tutorial TO ONE series
series TO MANY tutorials

series TO ONE category
category TO MANY series

****    WORKING WITH FOREIGN KEYS   ****
First we want the homepage to show only categories and have each card have a link
to a category. basically do the same thing as with tutorials except pass in 
all category objects as context.

starting off in views.py, make a single_slug() view that 
takes a request and a single_slug as parameters. 
see if single_slug is a category or a tutorial (by making a list of tutorials and 
categories and seeing if it matches the slug attribute for either)

adjust the default path so that it leads to categories.html: a page that shows only categories.
each of these categories should be clickable links that go to the url that is a single slug (no slashes.)

now set up urls.py with a new path with url <single_slug> where single slug is a variable, and the view
is single_slug(), and the name is "single_slug".

single_slug() will be the view that handles displaying each series associated with a category and
in the future each tutorial. Every one of these will have a url that is a "single slug" which is 
a url with no slashes. 

first thing we need in the view is logic to determine whether or not the single_slug is for a 
category or for a tutorial.

If the single_slug is for a category, we need to get all of the series that are associated with that category.
We use TutorialSeries.objects.filter() to querey the database. more detail on the queries in views.py of course.

Then we need to find the slug for the first episode of every series and associate it with each series.
A dictionary does the job here. 

Lastly, we need to pass it in as context for a template called category.html. each card will be a series
and each card will also be a link to the first tutorial.

More work to be done to show each tutorial. 

****    DYNAMIC SIDEBAR    ****
the point of this will be to have a way to navigate through each tutorial in a series.

start off in views.py in single_slug().
if the single slug is for a tutorial, then make a query for the tutorial.
Then use is as context in the render() function. You should also create
a template called tutorial.html for this render function. 
Now you can see every tutorial! Woo!



**** USEFUL COMMANDS ****

django-admin startproject [project name] (starts a new project)
py manage.py startapp [app name] (starts a new web app within a project)
py manage.py runserver (starts development server)
django-admin makemigrations (gets ready to set up database with tables/attributes that are reflected in models)
django-admin migrate (actually creates the database)

to test the database directly without using forms and stuff: 

py manage.py shell
from main.models import User (or other db model)
newUser = User(userName="name" [, fill in other columns])
newUser.save() (commit the changes)
User.objects.all() (print all the objects)
(note that you can also iterate over the objects in the database)
to delete a single entry in a table: 
SomeModel.objects.filter(id=id).delete()


creating a super user: 
py manage.py createsuperuser











notes from independent readings: 
**** MVC NOTES  **** https://data-flair.training/blogs/django-architecture/

The MVC (Model, View, Controller) architecture/pattern makes the project structure for
a website more modular: rather than having all of the code in one file, the code is spread 
over multiple files and organized such that code for each aspect is stored seperately.

Model: mediator between the website interface and the database. implements logic for the 
applications data domain. Model contains business logic in Django architecture. 
(business logic handles exchange between database and user interface)

View: UI logic. HTML/CSS created from the Models component.

Controller: handles user interaction and selects view according to model.

A model can be used in the views.py to either update the database with information from a user
or to render information from the database to the webpage.